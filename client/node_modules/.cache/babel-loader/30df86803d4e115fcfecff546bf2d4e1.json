{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JAEMIN\\\\Desktop\\\\crwn\\\\client\\\\src\\\\App.js\";\nimport React, { useEffect } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport Header from './components/header/header.component';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { checkUserSession } from './redux/user/user.actions';\nimport './App.css'; // firevase auth needs to store user information in state, 'App' component have been converted to class component.\n\nconst App = ({\n  checkUserSession,\n  currentUser\n}) => {\n  useEffect(() => {\n    checkUserSession();\n  }, [checkUserSession]); //if 'checkUserSession' is a property of the parent component, we will not use checkUserSession in the array.\n  //lec 199\n  //unsubscribeFromAuth = null // new method for closing subscription, default is null\n  // componentDidMount() {\n  //   checkUserSession();\n  // this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => { \n  //   // this is an open subscription\n  //   //whenever any changes occur on firebase related to this application, firebase sends massage that auth state changed whether user state updated; signing in/out etc. Then it will give us user info, so we dont have to manually fetch everytime.\n  //   // because it is an open subscription, we have to close subscription when application unmounted for no memory leak\n  //   //Lec 85\n  //   if (userAuth) { //if user signs in, state gets changed\n  //     const userRef = await createUserProfileDocument(userAuth)\n  //     userRef.onSnapshot(snapShot => {  \n  //       setCurrentUser({\n  //           id: snapShot.id,\n  //           ...snapShot.data() //.data() to be performed for actual data from document snapshot.\n  //         })\n  //       });\n  //   } else {\n  //     setCurrentUser(userAuth); \n  //     //meaning, if user signs out(userAuth = null), set 'currentUser' to 'null'\n  //     // addCollectionAndDocuments('collections', collectionsArray.map(({title, items}) => ({title, items}) ));\n  //     // firebase until function \n  //     // after updating data, no need.\n  //   }\n  // });\n  //}\n  // componentWillUnmount() {\n  //   this.unsubscribeFromAuth();  // so when this application unmounted, it closes subscription.\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: HomePage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/shop\",\n    component: ShopPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/checkout\",\n    component: CheckoutPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/signin\",\n    render: () => currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 66\n      }\n    }) : /*#__PURE__*/React.createElement(SignInAndSignUpPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 88\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })));\n}; //exact is boolean property 'exact' itself means true \n//path='/' means the base url such as localhost:3000.\n//component is what we wannna render.\n// --> when the path is the base url, render {HomePage}\n// without 'exact' even tho 'path' is partially true, it will render according 'component' \n//<Switch> gives us more control over renderingn page, it only renders only one component when it matches. no rendering multiple components. Lec 66. at 6:00\n\n\nconst mapStateToProps = createStructuredSelector({\n  // destructuring 'state' into '{user}'\n  currentUser: selectCurrentUser // collectionsArray: selectCollectionsForPreview // after updating data, no need.\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/JAEMIN/Desktop/crwn/client/src/App.js"],"names":["React","useEffect","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","SignInAndSignUpPage","CheckoutPage","Header","selectCurrentUser","checkUserSession","App","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,OAAOC,MAAP,MAAmB,sCAAnB;AAEA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,OAAO,WAAP,C,CAEA;;AACA,MAAMC,GAAG,GAAG,CAAC;AAAED,EAAAA,gBAAF;AAAoBE,EAAAA;AAApB,CAAD,KAAuC;AACjDd,EAAAA,SAAS,CAAC,MAAK;AACbY,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT,CADiD,CAIjD;AACA;AAIA;AAEA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACF;AAEA;AACA;AACA;;AACE,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,oBAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEN,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,WAAlB;AAA8B,IAAA,SAAS,EAAEE,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,SAAlB;AAA4B,IAAA,MAAM,EAAE,MAAKK,WAAW,gBAAG,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,gBAAyB,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,CADF;AAWD,CAtDH,C,CAuDE;AACA;AACA;AACA;AACA;AACA;;;AAEF,MAAMC,eAAe,GAAGV,wBAAwB,CAAC;AAAE;AACjDS,EAAAA,WAAW,EAAEH,iBADkC,CAE/C;;AAF+C,CAAD,CAAhD;;AAKA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACtCL,EAAAA,gBAAgB,EAAE,MAAMK,QAAQ,CAACL,gBAAgB,EAAjB;AADM,CAAL,CAAnC;;AAIA,eAAeR,OAAO,CAACW,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CH,GAA7C,CAAf","sourcesContent":["import React, { useEffect} from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\n\nimport Header from './components/header/header.component';\n\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { checkUserSession } from './redux/user/user.actions'\n\nimport './App.css';\n\n// firevase auth needs to store user information in state, 'App' component have been converted to class component.\nconst App = ({ checkUserSession, currentUser }) => {\n  useEffect(()=> {\n    checkUserSession();\n  }, [checkUserSession]); \n  //if 'checkUserSession' is a property of the parent component, we will not use checkUserSession in the array.\n  //lec 199\n\n\n\n  //unsubscribeFromAuth = null // new method for closing subscription, default is null\n\n  // componentDidMount() {\n  //   checkUserSession();\n    // this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => { \n    //   // this is an open subscription\n    //   //whenever any changes occur on firebase related to this application, firebase sends massage that auth state changed whether user state updated; signing in/out etc. Then it will give us user info, so we dont have to manually fetch everytime.\n    //   // because it is an open subscription, we have to close subscription when application unmounted for no memory leak\n    //   //Lec 85\n    //   if (userAuth) { //if user signs in, state gets changed\n    //     const userRef = await createUserProfileDocument(userAuth)\n\n    //     userRef.onSnapshot(snapShot => {  \n    //       setCurrentUser({\n    //           id: snapShot.id,\n    //           ...snapShot.data() //.data() to be performed for actual data from document snapshot.\n    //         })\n    //       });\n\n    //   } else {\n    //     setCurrentUser(userAuth); \n    //     //meaning, if user signs out(userAuth = null), set 'currentUser' to 'null'\n\n    //     // addCollectionAndDocuments('collections', collectionsArray.map(({title, items}) => ({title, items}) ));\n    //     // firebase until function \n    //     // after updating data, no need.\n    //   }\n \n    // });\n  //}\n\n  // componentWillUnmount() {\n  //   this.unsubscribeFromAuth();  // so when this application unmounted, it closes subscription.\n  // }\n    return (\n      <div>\n        <Header /> {/* Header has sign in and out button, so it needs state of currentUser to show sign in or out button aocordingly */}\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route exact path='/checkout' component={CheckoutPage} />\n          <Route exact path='/signin' render={()=> currentUser? (<Redirect to='/'/>): (<SignInAndSignUpPage/>)} />\n        </Switch>\n      </div>\n    ); \n  }\n  //exact is boolean property 'exact' itself means true \n  //path='/' means the base url such as localhost:3000.\n  //component is what we wannna render.\n  // --> when the path is the base url, render {HomePage}\n  // without 'exact' even tho 'path' is partially true, it will render according 'component' \n  //<Switch> gives us more control over renderingn page, it only renders only one component when it matches. no rendering multiple components. Lec 66. at 6:00\n\nconst mapStateToProps = createStructuredSelector({ // destructuring 'state' into '{user}'\n  currentUser: selectCurrentUser,\n  // collectionsArray: selectCollectionsForPreview // after updating data, no need.\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}