{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects'; //listens to every action we pass into\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); // like async await\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // call is to invoke a funciton.\n    // syntax first parameter is funciton to invoke and seond is the parameter of the function \n    // yield is for the case when the function takes longer than expected\n\n    yield put(fetchCollectionsSuccess(collectionsMap)); // put is to dispatch aciton\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // collectionRef\n  //   .get()\n  //   .then(snapshot => { \n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   })\n  //   .catch( error => dispatch(fetchCollectionsFailure(error.message)) )\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest( // takeEvery does not pause JS while waiting for async request. also it can cancel a function.\n  ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/JAEMIN/Desktop/crwn/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA0C,oBAA1C,C,CAAgE;;AAEhE,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AAEvC,MAAI;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFE,CAE0C;;AAC5C,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAAjC,CAHE,CAIF;AACA;AACA;;AACA,UAAMV,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT,CAPE,CAQF;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD,GAbsC,CAerC;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AAGD,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMjB,UAAU,EAAE;AAChBQ,EAAAA,eAAe,CAACU,uBADF,EAEdT,qBAFc,CAAhB;AAID;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all} from 'redux-saga/effects'; //listens to every action we pass into\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure\r\n} from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n\r\n  try {\r\n    const collectionRef = firestore.collection('collections');\r\n    const snapshot = yield collectionRef.get(); // like async await\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot) \r\n    // call is to invoke a funciton.\r\n    // syntax first parameter is funciton to invoke and seond is the parameter of the function \r\n    // yield is for the case when the function takes longer than expected\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n    // put is to dispatch aciton\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message))\r\n  }\r\n\r\n    // collectionRef\r\n    //   .get()\r\n    //   .then(snapshot => { \r\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n    //     dispatch(fetchCollectionsSuccess(collectionsMap));\r\n    //   })\r\n    //   .catch( error => dispatch(fetchCollectionsFailure(error.message)) )\r\n}\r\n\r\n\r\nexport function* fetchCollectionsStart() {\r\n  yield takeLatest( // takeEvery does not pause JS while waiting for async request. also it can cancel a function.\r\n    ShopActionTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionsAsync\r\n  );\r\n}\r\n\r\nexport function* shopSagas() {\r\n  yield all([call(fetchCollectionsStart)])\r\n}"]},"metadata":{},"sourceType":"module"}