{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst myOwnConfig = {\n  apiKey: \"AIzaSyAbSzgYDOrjxPJB9trgsw7RajF416Bg1pQ\",\n  authDomain: \"crwn-db-7ddd8.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-7ddd8.firebaseio.com\",\n  projectId: \"crwn-db-7ddd8\",\n  storageBucket: \"crwn-db-7ddd8.appspot.com\",\n  messagingSenderId: \"1040735018291\",\n  appId: \"1:1040735018291:web:1612cd447239162bd2b246\",\n  measurementId: \"G-CVD8K33CMZ\"\n}; //lec 89 taking userAuth from 'auth' library, including 'uid' etc, put it in firestore database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // we are making API request, so it is async\n  // userAuth is the object from 'auth' library\n  if (!userAuth) return; // we wanna perform this function only if user sign in.\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //uid is dynamically gnerated ID string by google when user is authenticated\n  //userRef is queryReference Document version from \".doc(`users/${userAuth.uid}`)\"\n  //'only document reference' object is used with \"CRUD\" method (creat= .set(), retrieve= .get(), update= .update(), delete= .delete())\n  //queryReference does not have actual data, but have details like 'path' 'id' etc\n\n  const collectionRef = firestore.collection('users'); // to get query reference or collection reference object\n\n  const snapShot = await userRef.get(); // async \n  //snapShot object is from perfoming .get() method. this snapShot is document snapShot since .get() is performed with documentRef.\n\n  const collectionSnapshot = await collectionRef.get(); //collection snapshot contains document snapshot \n\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    //meaning if it does not exist, we wanna store it in database\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        //create the data from userAuth, store data in firestore\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef; // in case we need it later.\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //firebase gives a reference no matter what even tho the data deos not exist.\n\n  console.log(objectsToAdd);\n  const batch = firestore.batch(); // updating data as a group so if update gets interrupted, it does not happen only some of data is stored.\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // create document with a unique random id \n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit(); //it returns a promise, when commit succeeds it resolves a void value, null.\n  //since it is async, we can chain off this function and call \".then\" function for further action.\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    //collecitons.docs is array-formed\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(myOwnConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); // this gives access to 'GoogleAuthProvider' from 'auth' library\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n}); //we wanna trigger google pop-up when we use the google provider\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); // 'signInWithPopup' takes many types of pop-ups, this selects only google one. this function creates pop-up when google-logging in.\n//after this, go to firebase console and enable google option under authentication/sign-in method\n\nexport default firebase; //lec.82","map":{"version":3,"sources":["C:/Users/JAEMIN/Desktop/crwn/client/src/firebase/firebase.utils.js"],"names":["firebase","myOwnConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst myOwnConfig = {\r\n  apiKey: \"AIzaSyAbSzgYDOrjxPJB9trgsw7RajF416Bg1pQ\",\r\n  authDomain: \"crwn-db-7ddd8.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-7ddd8.firebaseio.com\",\r\n  projectId: \"crwn-db-7ddd8\",\r\n  storageBucket: \"crwn-db-7ddd8.appspot.com\",\r\n  messagingSenderId: \"1040735018291\",\r\n  appId: \"1:1040735018291:web:1612cd447239162bd2b246\",\r\n  measurementId: \"G-CVD8K33CMZ\"\r\n};\r\n\r\n//lec 89 taking userAuth from 'auth' library, including 'uid' etc, put it in firestore database\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => { // we are making API request, so it is async\r\n  // userAuth is the object from 'auth' library\r\n  if (!userAuth) return; // we wanna perform this function only if user sign in.\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //uid is dynamically gnerated ID string by google when user is authenticated\r\n  //userRef is queryReference Document version from \".doc(`users/${userAuth.uid}`)\"\r\n  //'only document reference' object is used with \"CRUD\" method (creat= .set(), retrieve= .get(), update= .update(), delete= .delete())\r\n  //queryReference does not have actual data, but have details like 'path' 'id' etc\r\n  const collectionRef = firestore.collection('users');\r\n  // to get query reference or collection reference object\r\n  const snapShot = await userRef.get(); // async \r\n  //snapShot object is from perfoming .get() method. this snapShot is document snapShot since .get() is performed with documentRef.\r\n  const collectionSnapshot = await collectionRef.get()\r\n  //collection snapshot contains document snapshot \r\n  console.log({ collection: collectionSnapshot.docs.map(doc => doc.data()) });\r\n\r\n  if (!snapShot.exists) { //meaning if it does not exist, we wanna store it in database\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({ //create the data from userAuth, store data in firestore\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      })\r\n    } catch (error) {\r\n      console.log('error creating user', error.message );\r\n    }\r\n  }\r\n\r\n  return userRef; // in case we need it later.\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  //firebase gives a reference no matter what even tho the data deos not exist.\r\n  console.log(objectsToAdd);\r\n\r\n  const batch = firestore.batch(); // updating data as a group so if update gets interrupted, it does not happen only some of data is stored.\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc(); // create document with a unique random id \r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n  //it returns a promise, when commit succeeds it resolves a void value, null.\r\n  //since it is async, we can chain off this function and call \".then\" function for further action.\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map(doc => { //collecitons.docs is array-formed\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n  })\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {})\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject)=> {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject)\r\n  })\r\n}\r\n\r\nfirebase.initializeApp(myOwnConfig);\r\n\r\nexport const auth = firebase.auth();\r\n\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n// this gives access to 'GoogleAuthProvider' from 'auth' library\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\n//we wanna trigger google pop-up when we use the google provider\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); \r\n// 'signInWithPopup' takes many types of pop-ups, this selects only google one. this function creates pop-up when google-logging in.\r\n//after this, go to firebase console and enable google option under authentication/sign-in method\r\n\r\nexport default firebase; \r\n\r\n//lec.82 "]},"metadata":{},"sourceType":"module"}